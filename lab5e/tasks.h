#ifndef LAB_5B_TASKS_H
#define LAB_5B_TASKS_H

#include "../string/tasks/string_.h"

typedef enum WordBeforeFirstWordWithAReturnCode {
    FIRST_WORD_WITH_A,
    NOT_FOUND_A_WORD_WITH_A,
    WORD_FOUND,
    EMPTY_STRING
} WordBeforeFirstWordWithAReturnCode;

// –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
void removeNonLetters(char *s);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ –∫–∞–∂–¥–æ–π
// –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
void removeAdjacentEqualLetters(char *s);

// –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É
// —Å–ª–æ–≤–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ –æ–¥–Ω–æ–≥–æ
void removeExtraSpaces(char *s);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –æ–±—Ä–∞—Ç–∏–≤ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
void reverseWordsInString(char *s);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É
// —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ–π —á–∏—Å–ª–æ–º –ø—Ä–æ–±–µ–ª–æ–≤
void replaceNumbersWithSpaces(char *s);

// –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ ùë§1 –Ω–∞ —Å–ª–æ–≤–æ ùë§2
void replaceWord(char *source, char *w1, char *w2);

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ª–∏ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
bool isLexicographicOrdered(char *s);

// –í—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ —ç–∫—Ä–∞–Ω–∞
void printWordsInReverseOrder(char *s);

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
int countPalindromeWordsSeparatedWithComma(char *s);

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–µ—Ä–µ–¥—É—é—Ç—Å—è —Å–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ –≤
// –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–æ–∫ —á–∏—Å–ª–æ —Å–ª–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –≤ –¥—Ä—É–≥–æ–π, —Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ —ç—Ç–æ–π
// —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–ø–∏—Å–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
void makeMixedStringFromTwo(char *s1, char *s2, char *sWrite);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –∏–∑–º–µ–Ω–∏–≤ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π
void reverseWordOrder(char *s);

// –í—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –ø–µ—Ä–≤–æ–º—É –∏–∑ —Å–ª–æ–≤,
// —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±—É–∫–≤—É "–∞"
WordBeforeFirstWordWithAReturnCode getWordBeforeFirstWordWithA(
        char *s, WordDescriptor *word);

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ —Å–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å
// –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
bool lastWordInFirstStringInSecondString(char *str1, char *str2,
                                         WordDescriptor *word);

#endif
